# This configuration:
# 1. Installs Supervisor via pip (not yum).
# 2. Writes out a supervisord.conf that runs both app.py (via Gunicorn) and client.py.
# 3. Starts Supervisor after the application code is deployed (in container_commands).

files:
  "/etc/supervisord.conf":
    mode: "000644"
    owner: root
    group: root
    content: |
      [supervisord]
      nodaemon=true
      logfile=/var/log/supervisor/supervisord.log
      pidfile=/var/run/supervisord.pid

      [supervisorctl]
      serverurl=unix:///var/run/supervisor.sock

      [program:web]
      command=/usr/local/bin/gunicorn --bind 0.0.0.0:8080 app:app
      directory=/var/app/current
      autostart=true
      autorestart=true
      stdout_logfile=/var/log/web.out.log
      stderr_logfile=/var/log/web.err.log

      [program:worker]
      command=/usr/bin/python3 /var/app/current/client.py
      directory=/var/app/current
      autostart=true
      autorestart=true
      stdout_logfile=/var/log/worker.out.log
      stderr_logfile=/var/log/worker.err.log

commands:
  # Install Supervisor using pip before the application code is deployed.
  01_install_supervisor:
    command: "/usr/bin/pip3 install supervisor"
  # Create log directory for Supervisor
  02_create_supervisor_log_dir:
    command: "mkdir -p /var/log/supervisor"

container_commands:
  # After the app code is deployed, start supervisord using our config file.
  01_start_supervisor:
    command: "/usr/local/bin/supervisord -c /etc/supervisord.conf"
  # Restart all programs to ensure they're running the latest code.
  02_restart_supervisor:
    command: "/usr/local/bin/supervisorctl -c /etc/supervisord.conf restart all"
